<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #>
<#
    var engine = new Engine();
    var session = new TextTemplatingSession();
    var templates = Host.ResolveAssemblyReference("$(ProjectDir)");

    var output = Settings.OutputDirectory;
    var platform = Settings.PlatformName;;
    
    var database = new Database();
    var rows = database.GetEntities();

    // GenerateEndpointConstants(engine, session, rows, templates, $@"{output}\{platform}.Contract");
        
    foreach (var row in rows)
    {
        // if (!row.ComponentName.StartsWith("A"))
        //   continue;

        // Uncomment the code-generation function for each library you want to generate.

        // Index
        GenerateIndexes(engine, session, row, templates, $@"{output}\{platform}.Service");

        // Contract - Requests, Responses, SDK Clients
        // GenerateContractLibrary(engine, session, row, templates, $@"{output}\{platform}.Contract");
        
        // Service - Entities, Adapters, Repositories
        GenerateServiceLibrary(engine, session, row, templates, $@"{output}\{platform}.Service");

        // API - Controllers
        // GenerateApiLibrary(engine, session, row, templates, $@"{output}\{platform}.Api");

        // Test
        // GenerateTestLibrary(engine, session, row, templates, $@"{output}\{platform}.Test");
    }
#>
<#+
    public void GenerateEndpointConstants(Engine engine, TextTemplatingSession session, IEnumerable<Entity> entities, string templates, string output)
    {
        var source = $@"{templates}\Contract\Endpoints";
        var folder = GeneratePath(output, "Foundation", "Endpoints");

        GenerateClass(engine, session, null, $@"{source}\TableEndpoints.ttinclude", $@"{folder}\Tables.cs");
        GenerateClass(engine, session, null, $@"{source}\ViewEndpoints.ttinclude", $@"{folder}\Views.cs");
        // TODO: GenerateClass(engine, session, null, $@"{source}\ProcedureEndpoints.ttinclude", $@"{folder}\ProcedureEndpoints.cs");

        GenerateClass(engine, session, null, $@"{source}\ProjectionEndpoints.ttinclude", $@"{folder}\Projections.cs");

        // TODO: GenerateClass(engine, session, null, $@"{source}\CommandEndpoints.ttinclude", $@"{folder}\CommandEndpoints.cs");
        // TODO: GenerateClass(engine, session, null, $@"{source}\QueryEndpoints.ttinclude", $@"{folder}\QueryEndpoints.cs");
    }
    
    public void GenerateIndexes(Engine engine, TextTemplatingSession session, Entity entity, string templates, string output)
    {
        var source = $@"{templates}\Service";

        var folder = GeneratePath(output, entity.ComponentName, entity.ComponentFeature, "Data");
        session["ComponentLayer"] = "Data";
        GenerateClass(engine, session, entity, $@"{source}\Index.ttinclude", $@"{folder}\Index.md");

        folder = GeneratePath(output, entity.ComponentName, entity.ComponentFeature, "State");
        session["ComponentLayer"] = "State";
        GenerateClass(engine, session, entity, $@"{source}\Index.ttinclude", $@"{folder}\Index.md");

        folder = GeneratePath(output, entity.ComponentName, entity.ComponentFeature, "Process");
        session["ComponentLayer"] = "Process";
        GenerateClass(engine, session, entity, $@"{source}\Index.ttinclude", $@"{folder}\Index.md");

        folder = GeneratePath(output, entity.ComponentName, entity.ComponentFeature, "UI");
        session["ComponentLayer"] = "UI";
        GenerateClass(engine, session, entity, $@"{source}\Index.ttinclude", $@"{folder}\Index.md");
    }

    public void GenerateContractLibrary(Engine engine, TextTemplatingSession session, Entity entity, string templates, string output)
    {
        var source = $@"{templates}\Contract";
        var folder = GeneratePath(output, entity.ComponentName, entity.ComponentFeature, entity.EntityName);

        GenerateClass(engine, session, entity, $@"{source}\Packets.ttinclude", $@"{folder}\Packets.cs");
        
        if (entity.StorageStructure == "Table")
        {
            GenerateClass(engine, session, entity, $@"{source}\Commands.ttinclude", $@"{folder}\Commands.cs");
        }

        GenerateClass(engine, session, entity, $@"{source}\Queries.ttinclude", $@"{folder}\Queries.cs");

        GenerateClass(engine, session, entity, $@"{source}\Clients\{entity.StorageStructure}Client.ttinclude", $@"{folder}\Client.cs");
    }
    
    public void GenerateApiLibrary(Engine engine, TextTemplatingSession session, Entity entity, string templates, string output)
    {
        var source = $@"{templates}\Api";
        var folder = GeneratePath(output, entity.ComponentName, entity.ComponentFeature);
        GenerateClass(engine, session, entity, $@"{source}\{entity.StorageStructure}Controller.ttinclude", $@"{folder}\{entity.EntityName}Controller.cs");
    }

    public void GenerateServiceLibrary(Engine engine, TextTemplatingSession session, Entity entity, string templates, string output)
    {
        var source = $@"{templates}\Service";
        
        // Data
        
        var folder = GeneratePath(output, entity.ComponentName, entity.ComponentFeature, "Data", "Tables", entity.FutureStorageTable);
        GenerateClass(engine, session, entity, $@"{source}\TableEntity.ttinclude", $@"{folder}\{entity.FutureStorageTable}Entity.cs");
        GenerateClass(engine, session, entity, $@"{source}\TableEntityConfiguration.ttinclude", $@"{folder}\{entity.FutureStorageTable}EntityConfiguration.cs");
        
        // GenerateClass(engine, session, entity, $@"{source}\TableSearch.ttinclude", $@"{folder}\{entity.EntityName}Search.cs");

        if (entity.StorageStructure == "Table" || entity.StorageStructure == "Projection")
        {
            // GenerateClass(engine, session, entity, $@"{source}\TableEntityValidator.ttinclude", $@"{folder}\{entity.EntityName}EntityValidator.cs");
            // GenerateClass(engine, session, entity, $@"{source}\TableStore.ttinclude", $@"{folder}\{entity.EntityName}Store.cs");
        }

        // GenerateClass(engine, session, entity, $@"{source}\CriteriaValidator.ttinclude", $@"{folder}\{entity.EntityName}CriteriaValidator.cs");
        // GenerateClass(engine, session, entity, $@"{source}\{entity.StorageStructure}Adapter.ttinclude", $@"{folder}\{entity.EntityName}Adapter.cs");
        // GenerateClass(engine, session, entity, $@"{source}\{entity.StorageStructure}Service.ttinclude", $@"{folder}\{entity.EntityName}Service.cs");
    }

    public void GenerateTestLibrary(Engine engine, TextTemplatingSession session, Entity entity, string templates, string output)
    {
        var source = $@"{templates}\Test";
        var folder = GeneratePath(output, entity.ComponentName, entity.ComponentFeature);
        GenerateClass(engine, session, entity, $@"{source}\TableClientTests.ttinclude", $@"{folder}\{entity.EntityName}ClientTests.cs");
    }

    public void GenerateClass(Engine engine, TextTemplatingSession session, Entity entity, string input, string output)
    {
        if (entity != null) 
        {
            session["ComponentName"] = entity.ComponentName;
            session["ComponentFeature"] = entity.ComponentFeature;
            session["EntityName"] = entity.EntityName;
        }

        var sessionHost = (ITextTemplatingSessionHost) this.Host;
        sessionHost.Session = session;

        string templateFile = input;
        string templateContent = File.ReadAllText(templateFile);
                
        string generatedContent = engine.ProcessTemplate(templateContent, Host);

        File.WriteAllText(output, generatedContent);
    }

    public string CreateFolder(string folder)
    {
        if (!Directory.Exists(folder))
            Directory.CreateDirectory(folder);
        return folder;
    }

    public string GeneratePath(string a, string b, string c = "-", string d = "-", string e = "-", string f = "-")
    {
        var path = a;

        if (b != "-")
            path += $@"\{b}";

        if (c != "-")
            path += $@"\{c}";
        
        if (d != "-")
            path += $@"\{d}";

        if (e != "-")
            path += $@"\{e}";

        if (f != "-")
            path += $@"\{f}";
         
        return CreateFolder(path);
    }
#>