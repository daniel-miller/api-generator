<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="ComponentName" #>
<#@ parameter type="System.String" name="ComponentFeature" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var entity = database.GetEntities().GetEntity(ComponentName, ComponentFeature, EntityName);
    var entities = Inflector.PluralizeNoun(EntityName);

    var generator = new Generator(entity, "Test");
    var parameters = generator.PrimaryKeyMethodParameters();
    var arguments = generator.PrimaryKeyMethodArguments();
    var expression = generator.PrimaryKeyEqualityExpression();
    var values = generator.PrimaryKeyPropertyValues();
    var pkValuesForCreate = generator.PrimaryKeyPropertyValuesForCreate();
    var pkValuesForGet = generator.PrimaryKeyPropertyValuesForGet();
    var pkValuesForModify = generator.PrimaryKeyPropertyValuesForModify();

    var apiGroup = generator.ApiGroup();
    var variable = generator.EntityVariable();

#>
<#= generator.UsingStatements("Contract") #>

namespace <#= generator.Namespace() #>
{
    [Trait("Category", "SDK")]
    public class <#= EntityName #>ClientTests : IClassFixture<ApiClientFixture>
    {
        ApiClientFixture _fixture;

        public <#= EntityName #>ClientTests(ApiClientFixture fixture)
        {
            _fixture = fixture;
        }

        [Fact]
        public async Task Search()
        {
            var client = new <#= EntityName #>Client(_fixture.ApiClientFactory);
            var criteria = new <#= EntityName #>Criteria() { Take = 3 };
            var handles = await client.SearchAsync(criteria);
        }
    }
}