<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="ComponentName" #>
<#@ parameter type="System.String" name="ComponentFeature" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var EntityNamePlural = Inflector.PluralizeNoun(EntityName);

    var platform = Settings.PlatformName;
    var database = new Database();
    var entities = database.GetEntities();
    var entity = entities.GetEntity(ComponentName, ComponentFeature, EntityName);

    var generator = new Generator(entity, "Contract");
    var pkParameters = generator.PrimaryKeyMethodParameters(true);
    var pkArguments = generator.PrimaryKeyMethodArguments(true);
    var assertArguments = generator.PrimaryKeyMethodArguments(false, "assert");
    var deleteArguments = generator.PrimaryKeyMethodArguments(false, "delete");
    var modifyArguments = generator.PrimaryKeyMethodArguments(false, "modify");

    var apiRoute = "Endpoints." + generator.CollectionSlug();

#>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

using Common;

namespace <#= generator.Namespace() #>
{
    public class <#= EntityName #>Client
    {
        private readonly ApiClient _api;

        public <#= EntityName #>Client(IApiClientFactory factory)
            => _api = new ApiClient(factory);

        // Asynchronous (Queries)

        public async Task<bool> AssertAsync(Assert<#= EntityName #> assert)
            => await _api.Assert(<#= apiRoute #>.Assert, <#= assertArguments #>);

        public async Task<IEnumerable<<#= EntityName #>Model>> CollectAsync(Collect<#= EntityNamePlural #> collect)
            => await _api.HttpGet<IEnumerable<<#= EntityName #>Model>>(<#= apiRoute #>.Collection, _api.ToDictionary(collect.Criteria));

        public async Task<int> CountAsync(Count<#= EntityNamePlural #> count)
            => await _api.Count(<#= apiRoute #>.Count, _api.ToDictionary(count.Criteria));

        public async Task<IEnumerable<<#= EntityName #>Model>> ExportAsync(Export<#= EntityNamePlural #> export)
            => await _api.HttpPost<IEnumerable<<#= EntityName #>Model>>(<#= apiRoute #>.Export, _api.ToDictionary(export.Criteria));

        public async Task<<#= EntityName #>Model> FetchAsync(<#= pkParameters #>)
            => await _api.HttpGet<<#= EntityName #>Model>(<#= apiRoute #>.Collection, <#= pkArguments #>);

        public async Task<IEnumerable<<#= EntityName #>Match>> SearchAsync(Search<#= EntityNamePlural #> search)
            => await _api.HttpGet<IEnumerable<<#= EntityName #>Match>>(<#= apiRoute #>.Search, _api.ToDictionary(search.Criteria));

        // Synchronous (Queries)

        public bool Assert(Assert<#= EntityName #> assert)
            => Task.Run(() => _api.Assert(<#= apiRoute #>.Assert, <#= assertArguments #>)).GetAwaiter().GetResult();

        public IEnumerable<<#= EntityName #>Model> Collect(Collect<#= EntityNamePlural #> collect)
            => Task.Run(() => _api.HttpGet<IEnumerable<<#= EntityName #>Model>>(<#= apiRoute #>.Collection, _api.ToDictionary(collect.Criteria))).GetAwaiter().GetResult();

        public int Count(Count<#= EntityNamePlural #> count)
            => Task.Run(() => _api.Count(<#= apiRoute #>.Count, _api.ToDictionary(count.Criteria))).GetAwaiter().GetResult();

        public IEnumerable<<#= EntityName #>Model> Export(Export<#= EntityNamePlural #> export)
            => Task.Run(() => _api.HttpPost<IEnumerable<<#= EntityName #>Model>>(<#= apiRoute #>.Export, _api.ToDictionary(export.Criteria))).GetAwaiter().GetResult();

        public <#= EntityName #>Model Fetch(<#= pkParameters #>)
            => Task.Run(() => _api.HttpGet<<#= EntityName #>Model>(<#= apiRoute #>.Collection, <#= pkArguments #>)).GetAwaiter().GetResult();

        public IEnumerable<<#= EntityName #>Match> Search(Search<#= EntityNamePlural #> search)
            => Task.Run(() => _api.HttpGet<IEnumerable<<#= EntityName #>Match>>(<#= apiRoute #>.Search, _api.ToDictionary(search.Criteria))).GetAwaiter().GetResult();
    }   
}