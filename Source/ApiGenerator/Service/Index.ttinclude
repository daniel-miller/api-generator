<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="ComponentName" #>
<#@ parameter type="System.String" name="ComponentFeature" #>
<#@ parameter type="System.String" name="ComponentLayer" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var entities = database.GetEntities();
    var entity = entities.GetEntity(ComponentName, ComponentFeature, EntityName);

    var generator = new Generator(entity, "Service");

    var futureSchemaChanges = entities.GetFutureSchemaChanges(ComponentName, ComponentFeature);
#>
# <#= ComponentName #> / <#= ComponentFeature #> / <#= ComponentLayer #>

<#= ComponentFeature #> is a feature set in the <#= ComponentName #> <#= entity.ComponentType.ToLower() #> component. <# 
  
  if (ComponentLayer == "Data")
  {
    WriteLine($"Classes in this Data folder implement data access for this feature set. This is the persistence layer for {ComponentFeature}.");
    if (futureSchemaChanges != null)
    {
      WriteLine("");
      WriteLine("## Future Schema Changes");
      WriteLine("");
      WriteLine("When time and opportunity permit, the following database schema changes should be considered, to improve alignment with current database naming conventions:");
      WriteLine("");
      foreach (var item in futureSchemaChanges)
        WriteLine(item);
    }
  }
  
  if (ComponentLayer == "State")
    WriteLine($"Classes in this State folder implement business models for this feature set. This is the domain layer for {ComponentFeature}.");
  
  if (ComponentLayer == "Process")
    WriteLine($"Classes in this Process folder implement business logic and business rules for this feature set. This is the application layer for {ComponentFeature}.");
  
  if (ComponentLayer == "UI")
    WriteLine($"Classes in this UI folder implement presentation logic for this feature set. This is the code behind the user interface layer for {ComponentFeature}.");

#>
