<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="ComponentName" #>
<#@ parameter type="System.String" name="ComponentFeature" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var entity = database.GetEntities().GetEntity(ComponentName, ComponentFeature, EntityName);
    var entities = Inflector.PluralizeNoun(entity.EntityName);

    var generator = new Generator(entity, "Service");
    var parameters = generator.PrimaryKeyMethodParameters();
    var expression = generator.PrimaryKeyEqualityExpression();
    var properties = generator.PrimaryKeyPropertyNames();
    var values = generator.PrimaryKeyPropertyValues();
    var query = generator.BuildQuery();

#>
using Microsoft.EntityFrameworkCore;

namespace <#= generator.Namespace() #>;

public class <#= EntityName #>Store
{
    private readonly <#= entity.StorageStructure #>DbContext _db;
        
    public <#= EntityName #>Store(<#= entity.StorageStructure #>DbContext db)
    {
        _db = db;
    }

    public async Task<bool> InsertAsync(<#= EntityName #>Entity entity, CancellationToken token)
    {
        var exists = await ExistsAsync(<#= properties #>, token);
        if (exists)
            return false;
                
        await _db.<#= entities #>.AddAsync(entity, token);
        return await _db.SaveChangesAsync(token) > 0;
    }
        
    public async Task<bool> UpdateAsync(<#= EntityName #>Entity entity, CancellationToken token)
    {
        var exists = await ExistsAsync(<#= properties #>, token);
        if (!exists)
            return false;

        _db.Entry(entity).State = EntityState.Modified;
        return await _db.SaveChangesAsync(token) > 0;
    }
        
    public async Task<bool> DeleteAsync(<#= parameters #>, CancellationToken token)
    {
        var entity = await _db.<#= entities #>.SingleOrDefaultAsync(x => <#= expression #>, token);
        if (entity == null)
            return false;

        _db.<#= entities #>.Remove(entity);
        return await _db.SaveChangesAsync(token) > 0;
    }
        
    private async Task<bool> ExistsAsync(<#= parameters #>, CancellationToken token)
		=> await _db.<#= entities #>.AsNoTracking().AnyAsync(x => <#= expression #>, token);
}