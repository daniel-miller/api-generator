<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="ComponentName" #>
<#@ parameter type="System.String" name="ComponentFeature" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #><#
    
    var platform = Settings.PlatformName;
    var database = new Database();
    var entity = database.GetEntities().GetEntity(ComponentName, ComponentFeature, EntityName);
    var entities = Inflector.PluralizeNoun(entity.EntityName);

    var generator = new Generator(entity, "Service");
    var parameters = generator.PrimaryKeyMethodParameters();
    var arguments = generator.PrimaryKeyMethodArguments();
    var expression = generator.PrimaryKeyEqualityExpression();
    var values = generator.PrimaryKeyPropertyValues();
    var query = generator.BuildQuery();

#>
using FluentValidation;

<#= generator.UsingStatements("Contract") #>

namespace <#= generator.Namespace() #>;

public interface I<#= EntityName #>Service
{
    Task<<#= EntityName #>Model?> GetAsync(<#= parameters #>, CancellationToken token);
    Task<IEnumerable<<#= EntityName #>Model>> ListAsync(<#= EntityName #>Criteria criteria, CancellationToken token);

    Task<bool> CreateAsync(Create<#= EntityName #> create, CancellationToken token);
    Task<bool> ModifyAsync(<#= parameters #>, Modify<#= EntityName #> modify, CancellationToken token);
    Task<bool> DeleteAsync(<#= parameters #>, CancellationToken token);

    Task<IEnumerable<<#= EntityName #>Handle>> SearchAsync(<#= EntityName #>Criteria criteria, CancellationToken token);
    Task<bool> ExistsAsync(<#= parameters #>, CancellationToken token);
    Task<int> CountAsync(<#= EntityName #>Criteria criteria, CancellationToken token);
}

public class <#= EntityName #>Service : I<#= EntityName #>Service
{
    private readonly <#= EntityName #>Search _search;
    private readonly <#= EntityName #>Store _store;

    private readonly <#= EntityName #>Adapter _adapter = new <#= EntityName #>Adapter();

    private readonly IValidator<<#= EntityName #>Criteria> _criteriaValidator;
    private readonly IValidator<<#= EntityName #>Entity> _entityValidator;

    public <#= EntityName #>Service(<#= EntityName #>Search search, <#= EntityName #>Store store, 
        IValidator<<#= EntityName #>Criteria> criteriaValidator, IValidator<<#= EntityName #>Entity> entityValidator)
    {
        _search = search;
        _store = store;

        _criteriaValidator = criteriaValidator;
        _entityValidator = entityValidator;
    }

    public async Task<<#= EntityName #>Model?> GetAsync(<#= parameters #>, CancellationToken token)
    {
        var entity = await _search.GetAsync(<#= arguments #>, token);

        return entity != null ? _adapter.ToModel(entity) : null;
    }

    public async Task<IEnumerable<<#= EntityName #>Model>> ListAsync(<#= EntityName #>Criteria criteria, CancellationToken token)
    {
        await _criteriaValidator.ValidateAndThrowAsync(criteria, token);

        var entities = await _search.ListAsync(criteria, token);

        return _adapter.ToModel(entities);
    }

    public async Task<bool> CreateAsync(Create<#= EntityName #> create, CancellationToken token)
    {
        var entity = _adapter.ToEntity(create);

        await _entityValidator.ValidateAndThrowAsync(entity, token);

        return await _store.InsertAsync(entity, token);
    }

    public async Task<bool> ModifyAsync(<#= parameters #>, Modify<#= EntityName #> modify, CancellationToken token)
    {
        var entity = await _search.GetAsync(<#= arguments #>, token);

        if (entity == null)
            return false;

        _adapter.Copy(modify, entity);

        await _entityValidator.ValidateAndThrowAsync(entity, token);

        return await _store.UpdateAsync(entity, token);
    }

    public async Task<bool> DeleteAsync(<#= parameters #>, CancellationToken token)
    {
        return await _store.DeleteAsync(<#= arguments #>, token);
    }

    public async Task<int> CountAsync(<#= EntityName #>Criteria criteria, CancellationToken token)
    {
        return await _search.CountAsync(criteria, token);
    }

    public async Task<bool> ExistsAsync(<#= parameters #>, CancellationToken token)
    {
        return await _search.ExistsAsync(<#= arguments #>, token);
    }

    public async Task<IEnumerable<<#= EntityName #>Handle>> SearchAsync(<#= EntityName #>Criteria criteria, CancellationToken token)
    {
        await _criteriaValidator.ValidateAndThrowAsync(criteria, token);

        var entities = await _search.ListAsync(criteria, token);

        return _adapter.ToHandle(entities);
    }
}