<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="ComponentName" #>
<#@ parameter type="System.String" name="ComponentFeature" #>
<#@ parameter type="System.String" name="EntityName" #>
<#@ assembly name="$(SolutionDir)\..\Build\ApiGenerator.Utility.dll" #>
<#@ import namespace="ApiGenerator.Utility" #>
using Microsoft.EntityFrameworkCore;

<#

    var platform = Settings.PlatformName;
    var database = new Database();
    
    var tables = database.GetEndpoints()
        .Where(x => x.StorageStructure == "Table")
        .ToList();

    var toolkits = tables.Select(x => x.ComponentName)
        .Distinct()
        .OrderBy(x => x);

    foreach (var toolkit in toolkits)
    {
        if (toolkit == "Integration" || toolkit == "Plugin")
        {    
            var toolsets = tables.Where(x => x.ComponentName == toolkit)
                .Select(x => x.ComponentFeature)
                .Distinct()
                .OrderBy(x => x);

            foreach (var toolset in toolsets)
            {
                var space = $"{platform}.Service.{toolkit}.{toolset}";
                WriteLine($"using {space};");
            }
        }
        else
        {
            var space = $"{platform}.Service.{toolkit}";
            WriteLine($"using {space};");
        }
    }
#>

namespace Shift.Service;

public class TableDbContext : DbContext
{
    public TableDbContext(DbContextOptions options) : base(options) { }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        ApplyConfigurations(builder);
        ApplyNavigations(builder);

        var decimalProperties = builder.Model
            .GetEntityTypes()
            .SelectMany(t => t.GetProperties())
            .Where(p => (Nullable.GetUnderlyingType(p.ClrType) ?? p.ClrType) == typeof(decimal));

        foreach (var property in decimalProperties)
        {
            property.SetPrecision(18);
            property.SetScale(2);
        }
    }

    private void ApplyNavigations(ModelBuilder builder)
    {
        // builder.Entity<UserEntity>().HasMany(e => e.Persons).WithOne(e => e.User).HasForeignKey(e => e.UserIdentifier).HasPrincipalKey(e => e.UserIdentifier);
    }

    private void ApplyConfigurations(ModelBuilder builder)
    {
<#
var lines = new List<string>();
foreach (var entity in tables)
{
    lines.Add("        builder.ApplyConfiguration(new " + entity.EntityName + "Configuration());");
}
lines.Sort();
foreach (var line in lines)
    WriteLine(line);
#>
    }

    #region Database Tables

<#
lines = new List<string>();
foreach (var entity in tables)
{
    lines.Add("        internal DbSet<" + entity.EntityName + "Entity> " + entity.DomainEntities + " { get; set; }");
}
lines.Sort();
foreach (var line in lines)
    WriteLine(line);
#>

    #endregion
}